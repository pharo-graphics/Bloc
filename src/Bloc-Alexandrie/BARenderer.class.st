"
I am a host-renderer to draw a space's elements on an `AeCanvas`.

Both buffer and form host-spaces are supported.
"
Class {
	#name : 'BARenderer',
	#superclass : 'BlHostRenderer',
	#package : 'Bloc',
	#tag : 'Alexandrie-Renderer',
	#package : 'Bloc-Alexandrie',
	#tag : 'Renderer'
}

{ #category : 'accessing' }
BARenderer class >> label [

	^ 'Alexandrie'
]

{ #category : 'host - api' }
BARenderer class >> newFormFrom: aBlElement [

	^ aBlElement aeAsForm
]

{ #category : 'host - api' }
BARenderer class >> offscreenMeasureTextParagraph: aBlTextParagraph [

	BAOffscreen instance measureTextParagraph: aBlTextParagraph
]

{ #category : 'host - api' }
BARenderer class >> write: aBlElement asPngTo: aFileReference [
	"Draw the element into a PNG at the specified location."

	BAExporter png
			target: aFileReference;
			element: aBlElement;
			export
]

{ #category : 'initialization' }
BARenderer >> createBufferSpaceRenderer [

	^ BABufferSpaceRenderer new
]

{ #category : 'initialization' }
BARenderer >> createFormSpaceRenderer [

	^ BAFormSpaceRenderer new
]

{ #category : 'initialization' }
BARenderer >> initializeForHostSpace: aBlHostSpace [
	"Initialize this renderer for a given host space.
	Please note, that it I be called multiple times"

	self initialize.

	session := Smalltalk session.
	
	"we should mark it as a current one before initializing a canvas as it may rely on opengl context"
	aBlHostSpace makeCurrent.

	surface := aBlHostSpace newBlHostRendererSurface.
	surfaceRenderer := surface newSurfaceRendererOn: aBlHostSpace.
	spaceRenderer := surface newSpaceRendererOn: self.

	textMeasurer := BASpaceTextMeasurer new
		spaceRenderer: spaceRenderer;
		yourself

]
